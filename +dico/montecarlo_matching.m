function [Mrate, Err0] = montecarlo_matching(data, SD_Dico, nbExp, NLvls, Hrecon, Hsd, Hmatching, verbose)
% Inputs:
% data: a 1D cell, data{n} is the noiseless data generated by the n-th shape in the dictionary
% SD_Dico: a 1D cell, SD_Dico{n} is the shape descriptor of the n-th shape in the dictionary, and
% has the same length as data.
%
% Outputs:
% Mrate

if nargin < 8
    verbose = true;
end

nbShapes = length(data);
nbNlv = length(NLvls);

Err0 = cell(nbNlv, nbShapes); 
Mrate = cell(nbNlv, nbShapes);

% Var0 = zeros(nbNlv, nbShapes);

for k = 1:nbNlv
    nlvl = NLvls(k); % noise level

    if verbose
        fprintf('Proceeding the noise level %f...\n', nlvl);
    end
    
    for m = 1:nbShapes
        if verbose
            fprintf('...Proceeding the shape %d of %d...\n', m, nbShapes);
        end
        
        for p = 1:nbExp        
            Xr = Hrecon(data{m}, nlvl);
            SDr = Hsd(Xr);
            [toto, idx, ~] = Hmatching(SDr, SD_Dico);
            
            if p == 1
                mt = (idx == m);
                Err0{k, m} = toto;
            else
                mt = mt + (idx == m);
                Err0{k, m} = Err0{k, m} + toto;
            end                    
        end
        
        Err0{k,m} = squeeze(Err0{k,m} / nbExp);
        Mrate{k,m} = mt / nbExp;
    end
end


