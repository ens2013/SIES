function [Mrate, Err0] = montecarlo_matching(data, SD_Dico, nbExp, NLvls, Hrecon, Hsd, Hmatching, verbose)
% Monte-carlo test for dictionary matching algorithm.
% This function provides a general framework for the test of a dictionary
% matching algorithm on some data set. For a range of noise level,
% it reconstructs features from the noisy data and compute shape descriptors,
% then matches in the precomputed dictionary. By providing function handles
% of (physics specified) reconstruction and dictionary matching, this
% function can work for different types of problems.
%
% Inputs:
% data: a 1D cell, data{n} is the noiseless data generated by the n-th shape in the dictionary
% SD_Dico: a 1D cell, SD_Dico{n} is the shape descriptor of the n-th shape in the dictionary, and
% has the same length as data.
% nbExp: number of monte-carlo experiments
% NLvls: a list of noise percentage to test
% Hrecon: function handle for reconstruction of feature. 
%         Interface: X = Hrecon(data{m}, nlvl)
% Hsd: function handle for computation of shape descriptor
%         Interface: SD = Hsd(X)
% Hmatching: function handle for dictionary matching
%         Interface: [err, idx] = Hmatching(SD, SD_Dico)
% 
% Outputs:
% Mrate: correct recognition rate corresponding to each noise level, a cell
% of size (number of noise level X number of shapes)
% Err0: error (euclidean distance) of comparaison of shape descriptors, a
% cell of size (number of noise level X number of shapes)

if nargin < 8
    verbose = true;
end

nbShapes = length(data);
nbNlv = length(NLvls);

Err0 = cell(nbNlv, nbShapes); 
Mrate = cell(nbNlv, nbShapes);

% Var0 = zeros(nbNlv, nbShapes);

for k = 1:nbNlv
    nlvl = NLvls(k); % noise level

    if verbose
        fprintf('Proceeding the noise level %f...\n', nlvl);
    end
    
    for m = 1:nbShapes
        if verbose
            fprintf('...Proceeding the shape %d of %d...\n', m, nbShapes);
        end
        
        for p = 1:nbExp        
            Xr = Hrecon(data{m}, nlvl);
            SDr = Hsd(Xr);
            [toto, idx, ~] = Hmatching(SDr, SD_Dico);
            
            if p == 1
                mt = (idx == m);
                Err0{k, m} = toto;
            else
                mt = mt + (idx == m);
                Err0{k, m} = Err0{k, m} + toto;
            end                    
        end
        
        Err0{k,m} = squeeze(Err0{k,m} / nbExp);
        Mrate{k,m} = mt / nbExp;
    end
end


